{
  "info": {
    "_postman_id": "6005394d-9081-4317-9ae1-59ba6f102aca",
    "name": "Customer Onboarding App - LightningTalk",
    "description": "Simplify the merchant onboardings and improve your sales team’s efficiency thanks to Saltpay’s Merchant Onboarding App.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21744518"
  },
  "item": [
    {
      "name": "UI Testing",
      "item": [
        {
          "name": "Performance",
          "item": [
            {
              "name": "Response time",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response time is less than 3 second\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Headers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Content encoding should be set to gzip\", function () {",
                      "    pm.response.to.be.header(\"Content-Encoding\", \"br\"); ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Response size",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response size is less than 35KB\", function () {",
                      "    pm.expect(pm.response.responseSize).to.be.below(35000);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            }
          ],
          "description": "Covering Response time, Headers and Response size",
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Functionality",
          "item": [
            {
              "name": "Status code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Page structure",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var cheerio = require('cheerio');",
                      "var $ = cheerio.load(pm.response.text());",
                      "pm.test('Page title should be set', function () {",
                      "    pm.expect($('title').text()).to.equal('SaltPay Merchant Onboarding App'); ",
                      "});",
                      "pm.test('Page should have header and footer tags', function () {",
                      "    pm.expect($('header')).to.exist;",
                      "    pm.expect($('footer')).to.exist;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Manifest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Manifest should have valid fields', function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.name).to.equal('SaltPay Merchant Onboarding App');",
                      "    pm.expect(jsonData.short_name).to.equal('Onboarding Platform');",
                      "    pm.expect(jsonData.background_color).to.equal('#fff');",
                      "    pm.expect(jsonData.ios).to.equal(true);",
                      "    pm.expect(jsonData.display).to.equal('standalone');",
                      "    pm.expect(jsonData.icons).to.be.an(\"array\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/manifest.json",
                  "host": ["{{url}}"],
                  "path": ["manifest.json"]
                }
              },
              "response": []
            }
          ],
          "description": "Covering the Status code, page structure and Manifest",
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Security",
          "item": [
            {
              "name": "HTTPS and HSTS",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response should have status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Strict-Transport-Security header should be set', function () {",
                      "   pm.response.to.have.header(",
                      "     'Strict-Transport-Security',",
                      "     'max-age=63072000; includeSubDomains; preload'",
                      "   );",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Check for Security Headers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('checks for Content-Security-Policy header', function () {",
                      "  pm.expect(pm.response.headers.get('Content-Security-Policy')).not.equal(undefined);",
                      "});",
                      "pm.test(\"checks for X-Frame-Options header\", function() {",
                      "    const header = pm.response.headers.get(\"X-Frame-Options\")||\"\"",
                      "    pm.expect(header).equal('SAMEORIGIN')",
                      "});",
                      "",
                      "pm.test(\"checks for Strict-Transport-Security header\", function() {",
                      "    const header = pm.response.headers.get(\"Strict-Transport-Security\")||\"\"",
                      "    pm.expect(header.toLowerCase()).contains(\"max-age\")",
                      "});",
                      "",
                      "pm.test(\"checks for X-XSS-Protection header\", function() {",
                      "    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).not.equal(undefined)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "No referrer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var cheerio = require('cheerio');",
                      "var $ = cheerio.load(pm.response.text());",
                      "pm.test('All external ... valid attributed', function () {",
                      "    $('a').each(function(i, elem) {",
                      "        if ($(elem).attr('target') !== '_blank') {",
                      "            return;",
                      "        }",
                      "        ",
                      "        pm.expect($(elem).attr('rel'))",
                      "          .to.equal('noopener noreferrer', $(elem).attr('href'));",
                      "    }); ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            },
            {
              "name": "Evaluate CSP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const response = JSON.parse(pm.response.text())",
                      "const {stats,recommendations} = response",
                      "",
                      "pm.test(\"checks for CSP threats\", function() {",
                      "    pm.expect(stats.totalHigh).to.be.equal(1)",
                      "});",
                      "",
                      "const color= \"red\"",
                      "let template = `",
                      "<div style=\"margin-top:16px\">",
                      "  <table id=\"table\" style=\"font-family:Inter, OpenSans, Helvetica, Arial, sans-serif; border:1px solid #ccc;\">",
                      "        <tr style=\"background-color:#f2f2f2;\">",
                      "            <th style=\"padding:16px;\">Severity</th>",
                      "            <th style=\"padding:16px;\">Directive</th>",
                      "            <th style=\"padding:16px;\">Recommendation</th>",
                      "            <th style=\"padding:16px;\">Message</th>",
                      "        </tr>",
                      "        {{#each recommendations}}",
                      "            <tr>",
                      "                <td style=\"padding:16px;\">{{severity}}</td>",
                      "                <td style=\"padding:16px;\">{{directive}}</td>",
                      "                <td style=\"padding:16px;\">{{recommendation}}</td>",
                      "                <td style=\"padding:16px;\">{{message}}</td>",
                      "            </tr>",
                      "        {{/each}}",
                      "      </table>",
                      "  </div>",
                      "  `;",
                      "  pm.visualizer.set(template, {",
                      "      recommendations:recommendations",
                      "  });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\"URL\":\"{{url}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "https://csper.io/api/evaluations",
                  "protocol": "https",
                  "host": ["csper", "io"],
                  "path": ["api", "evaluations"]
                },
                "description": "This request evaluates the Content Security Policy of an API using [**csper.io**](http://csper.io/). Check out the **Visualize** tab in the **Response** section to view the Content Security Policy analysis."
              },
              "response": []
            },
            {
              "name": "Robots.txt",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('robots.txt file should exist', function () {",
                      "    pm.response.to.have.header('Content-Type', 'text/html; charset=utf-8');",
                      "});",
                      "// Robots.txt: This file resides at the root level /robots.txt and specifies how web crawlers (like Google’s bot) should interact with your webpages. Even though it does not enforce anything — evil bots might simply ignore — it is a good practice to have a robots.txt file which clearly denotes which routes are allowed to be crawled."
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "CORS Misconfiguration",
          "item": [
            {
              "name": "Basic Origin Reflection Test",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "pm.test(\"checks vulnerability with basic origin reflection\", function() {",
                      "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(pm.environment.get(\"malicious_origin\"))",
                      "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false'])",
                      "});",
                      "",
                      "let template = `",
                      "<div style=\"align-items:center;display:flex;justify-content:center;margin:16px 32px;\">",
                      "  <div style=\"padding:16px; font-family:Inter, OpenSans, Helvetica, Arial, sans-serif; border:1px solid #ccc; text-align:center; vertical-align:middle; border-radius:8px;background-color:#f2f2f2\">",
                      "    <span >{{text}}</span/>",
                      "    <br/>",
                      "    <span>Learn more at <u>{{link}}</u></span>",
                      "  </div>",
                      "  </div>",
                      "  `;",
                      "  pm.visualizer.set(template, {",
                      "    text:",
                      "      'If this test fails then it means that maybe any domain can access resources or sensitive information from your domain',",
                      "      link:\"https://portswigger.net/web-security/cors\"",
                      "  });"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["pm.environment.set('malicious_origin', \"https://malicious.website.example.com\");", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{malicious_origin}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                },
                "description": "This request checks if the API is vulnerable to untrusted origins. It passes a suspicious or foreign-origin URL in the **Headers** and checks if the APIs accept the request from that origin."
              },
              "response": []
            },
            {
              "name": "Trusted null Origin Test",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "pm.test(\"checks vulnerability with trusted null origin\", function() {",
                      "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).not.equal(\"null\")",
                      "    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Credentials\")).to.be.oneOf([undefined,'false'])",
                      "});",
                      "let template = `",
                      "<div style=\"align-items:center;display:flex;justify-content:center;margin-top:16px\">",
                      "  <div style=\"padding:16px; font-family:Inter, OpenSans, Helvetica, Arial, sans-serif; border:1px solid #ccc; text-align:center; vertical-align:middle; border-radius:8px;background-color:#f2f2f2\">",
                      "    <span >{{text}}</span/>",
                      "    <br/>",
                      "    <span>Learn more at <u>{{link}}</u></span>",
                      "  </div>",
                      "  </div>",
                      "  `;",
                      "  pm.visualizer.set(template, {",
                      "    text:",
                      "      'If this test fails then it means that maybe any domain can access resources or sensitive information from your domain by passing \"Origin\" as \"null\"',",
                      "      link:\"https://portswigger.net/web-security/cors\"",
                      "  });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Origin",
                    "value": "null",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                },
                "description": "This request checks if the API is vulnerable to null origin. It passes `null` in the **Origin** header and checks if the API is accepting requests from `null` origin or not.\n\nTo learn more, see [Whitelisted null origin value](https://portswigger.net/web-security/cors#:~:text=Whitelisted%20null%20origin%20value,Requests%20from%20serialized%20data.)."
              },
              "response": []
            }
          ],
          "description": "This folder contains the following requests to check for possible CORS misconfiguration in the API:\n\n- Basic origin reflection test\n- Trusted null origin test\n- Trusted unauthorized subdomain test\n\nTo learn more, see [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)."
        },
        {
          "name": "Integrity",
          "item": [
            {
              "name": "Link validity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var cheerio = require('cheerio');",
                      "var $ = cheerio.load(pm.response.text());",
                      "pm.test(\"All links on the page should be valid\", function () {",
                      "    $('a').each(function(i, elem) {",
                      "        var originalPath = $(elem).attr('href');",
                      "        var path = originalPath;",
                      "        ",
                      "        if (path && path[0] === '/') {",
                      "            path = pm.environment.get('url') + path;       ",
                      "        }",
                      "        ",
                      "        pm.sendRequest(path, function (err, res) {",
                      "            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {",
                      "                pm.expect(err).to.equal(null);",
                      "                pm.expect(res).to.have.property('code', 200);",
                      "                pm.expect(res).to.have.property('status', 'OK');",
                      "            });",
                      "        });",
                      "    }); ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}",
                  "host": ["{{url}}"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        }
      ],
      "description": "Collection of UI testing focusing to cover Performance, Functionality, Security, CORS Misconfiguration and Integrity.",
      "auth": {
        "type": "noauth"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": ["pm.environment.set('url', \"https://onboarding-ui-saltpay.vercel.app/\");", ""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
